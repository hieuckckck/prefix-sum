The Question is simple in the way as it is only asking to find unique palindromic strings of only length 3
----------
So lets suppose there is a string of length 3

We know that it is palindromic if first and last letter are same

a_ ____ a

Now all we have to do is find the middle letter which can be anything a, b, c, d ,e , , , , but the middle character cannot repeated as we have find unique palindromic strings

Lets fill up the first and last block by placing the all 26 characters a,b,c,d,e,f,g,h,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z as the first and last letter of the 3 length string

All the remaining work left to do is take the input string s and find the first and last index of the letter and if our string does contain only 1 letter or even does not have that letter we will mark it -1 so to know we dont need to process it

Now ever thing is prepared and only thing left to do is to traverse thought the string s for each letter from its first index to the last index and find the unique characters between it and then add it to our answer

Time complexity is 0(26*n) = O(n)

class Solution {
public:

int countPalindromicSubsequence(string s) {
    int ans = 0;
    
    vector<vector<int>> arr(26,vector<int> (2,-1));

    for(int i=0; i<s.length(); i++)
    {
        if(arr[s[i] - 'a'][0] == -1) arr[s[i] - 'a'][0] = i;
        else arr[s[i] - 'a'][1] = i; 
    }

    for(int i=0; i<26; i++)
    {
        int freq[26] = {0};

        for(int k = arr[i][0]+1; k<arr[i][1]; k++)
        {
           if(freq[s[k] - 'a'] == 0) ans++;
           freq[s[k] - 'a'] = 1;      
        }
        
    }

    return ans;

    }
};
