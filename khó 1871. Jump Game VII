We use a DP + Sliding window approach to solve this problem:
We keep a count of the number of indices in a window of size maxJump-minJump from which we can reach current index 'i'.
We also decerement count if there was a possiblity to reach current index i from i-maxJump-1, as we can no longer jump from that index to reach current 'i' as it's no longer a part of the sliding window.
Finally, for the current index i if the count > 0 , this means that there is atleast one way to reach from the window (i-maxJump, i-minJump) to our i, so we set the dp[i] = 0 in this case, with the added check that s[i]=='0'.
Feel free to drop your queries in the comment box
class Solution {
public:
    bool canReach(string s, int mi, int ma) {
        if(s.back()=='1)return false; // In case the last character is '1', we'll never be able to reach the end.
        vector<bool>dp(s.size());
        dp[0] = true;
        int count = 0;
        for(int i = 1; i<s.size(); i++){
            if(i>ma){
                count-=dp[i-ma-1]; //Moving sliding window forward by decrementing the count by the dp value of the index that is no longer in our window
            }
            if(i>=mi){
                count+=dp[i-mi];
            }
            if(count>0&&s[i]=='0')dp[i] = true;
            else dp[i] = false;
        }
        return dp.back();
    }
};
c2:
BFS - C++ Explained
-> If last character is not '0' , return false

Assuming i has current position where we are standing and using standard BFS approach with slight optimization (to avoid TLE).

Slight Optimization : I got TLE with standard BFS so added this to avoid extra traversals.
-> max_curr : max position which has been visited till previous iteration , start next iteration after max_curr to avoid duplication indices traversals.

Initially i = 0 , insert i into queue.
Pop i from queue front
Iterate from max (i+minJump,max_curr) to (i+maxJump) and put all 0s indices in queue.
Update max_curr after complete iteration.
class Solution {
public:
    bool canReach(string s, int minJump, int maxJump) {
        int n = s.length();
        if(s[n-1]!='0')
            return false;
        
        int i = 0;
        queue<int> q;
        q.push(0);
        int curr_max = 0;
        
        while(!q.empty()){
            i = q.front();
            q.pop();
            if(i == n-1)
                return true;
            
            for(int j = max(i + minJump, curr_max); j <= min(i + maxJump, n - 1); j++){
                if(s[j] == '0')   q.push(j);
            }   
            curr_max = min(i+maxJump+1, n);
        }
        return false;
    }
};
