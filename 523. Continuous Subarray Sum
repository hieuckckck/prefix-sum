class Solution {
public:
	bool checkSubarraySum(vector<int>& nums, int k) {
		unordered_map<int,int> mp;
		int n=nums.size();
		if(n==1)
			return false;
		if(k==1)
			return true;        
		int mod=nums[0]%k;
		mp[mod]=0;
		for(int i=1;i<n;i++)
		{
			mod=(mod+nums[i])%k;
			if(mod==0|| (mp.find(mod)!=mp.end() && mp[mod]!=i-1  ))
				return true;
			if(mp.find(mod)==mp.end())
				mp[mod]=i;

		}
		return false;
	}
};
c2:
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
   
        unordered_map<int, int> mp;
        mp[0] = 0;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
      
            if (mp.find(sum % k) == mp.end())
                mp[sum % k] = i + 1;
 
            else if (mp[sum % k] < i)
                return true;
        }
        return false;
    }
};
