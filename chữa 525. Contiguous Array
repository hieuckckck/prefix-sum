 APPROACH 1 : BRUTE FORCE thuat toan vet can

The brute force approach is simple.
We traverse the array using 2 loops.
We start at i = 0 & traverse till the last index using loop 1 & loop 2 traverses from i & traverses till the last index.
We consider every possible subarray within the given array and count the number of zeros and ones in each subarray.
Each time, the no. of zeroes & ones becomes equal we update the maxLength.
Time Compelxity : O(n^2)

Space Complexity : O(1)

Code :

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
		int maxlen = 0;
        for (int i = 0; i < nums.size(); i++) {
            int zeroes = 0, ones = 0;
            for (int j = i; j < nums.size(); j++) {
                if (nums[j] == 0) {
                    zeroes++;
                } else {
                    ones++;
                }
                if (zeroes == ones) {
                    maxlen = max(maxlen, j - i + 1);
                }
            }
        }
        return maxlen;
    }
};
✔️ APPROACH 2 : Using Array

We use a variable sum, which is used to store the relative number of ones and zeros encountered so far.
sum is incremented by one whenever a 1 is encountered and decremented by one whenever a 0 is encountered.
We traverse the array nums from the beginning.
If at any index, sum becomes zero, it means that we've encountered equal number of zeros and ones from the beginning till the current index.
And at any index, we encounter a sum that's already been encountered at some previous index, it means that the number of 0's and 1's are equal between the indices corresponding to the equal sum values.
We keep track of the indices that correspond to the same sum with maximum difference between the indices to find the maximum length of the subarrays with equal number of 0's & 1's.
Now, sum can range between -n (When all elements are zeros) to +n (When all elements are ones).
Thus, we make use of an array arr of size 2n+1 to keep a track of the all values of sum encountered so far.
We make an entry containing the current element's index in the arrarr for a new sum encountered everytime.
Whenever, we encounter the same sum again, we determine the length of the subarray lying between the indices corresponding to the same sum values.
Time Complexity : O(n)

Space Complexity : O(n)

Code :

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
		vector<int> arr(2*nums.size() + 1, INT_MIN);
		arr[nums.size()] = -1;
        int maxLen = 0, sum = 0;                                      vd:a[5]=a[5-4]=1 với kích thước của arr là 4 phần tử ,ý tưởng giống c3.
        for (int i = 0; i < nums.size(); i++) {
            sum += (nums[i] == 0 ? -1 : 1);
			if (arr[sum + nums.size()] >= -1)  maxLen = max(maxLen, i - arr[sum + nums.size()]);
			else  arr[sum + nums.size()] = i; 
        }
        return maxLen;
    }
};
✔️ APPROACH 3 : Using Hash Table

The appproach is same as that of the previous one.
But here we use a map instead of an array of size 2n+1, because it's not necessary that we'll encounter all possible sums in between -n & +n.
The array will store the indices for each new sum encountered & if a sum is already encountered it will determine the difference between the 2 indices.
At each index, it updates the maxLen of equal number of 0's & 1's.
Finally, we return maxLen.
Time Complexity : O(n)

Space Complexity : O(n)

Code :

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int sum=0, maxLen=0;
        unordered_map<int, int> seen{{0, -1}};
        
        for(int i=0; i<nums.size(); i++){
            sum += nums[i]==1 ? 1 : -1;
            if(seen.count(sum)) maxLen = max(maxLen, i-seen[sum]);
            else seen[sum] = i;
        }
        return maxLen;
    }
};

tương tự nhưng khó hơn:

1371. Find the Longest Substring Containing Vowels in Even Counts

class Solution 
{
public:
    int findTheLongestSubstring(string s) 
    {
        //final ans to be retruned from the function
        int ans = 0;

        //the count of the vowel must be even number of times 
        //vowels can occur even number of times..0 , 2 , 4 , 6...2(n)  

        //to maintain the bit mask we will have a count 
        int num = 0;

        //we are going to store the number in a unordered_map
        unordered_map<int,int>mp;    

        //an idx to iterate over the string
        int idx = 0;
        
        //storing the inital count in the map
        mp[num] = -1;

        //basically the consonant will help to increase the length of the string
        while(idx < s.length())
        {
            char ch = s[idx];
            
            if(isVowel(ch) == true)
            {
                char ch = s[idx];
                int pos = ch - 'a';

                //we will toggle the bit to the currosponding pos of the char
                num = (num ^ (1<<pos));

                if(mp.find(num) != mp.end())
                {
                    //previously we have encountred the num before also
                    int start = mp[num]+1;
                    int end   = idx;
                    int wind_size = (end - start + 1);

                    if(wind_size > ans)
                    ans = wind_size;
                }
            }
            else
            {
                //consonant will only help to increase the length of the substring
                //in which the count of the vowel is even number of times
              
                //consonant will not contribute any value to the num
                int start = mp[num]+1;
                int end   = idx;
                int wind_size = (end - start + 1);

                if(wind_size > ans)
                ans = wind_size;
            }
            if(mp.find(num) == mp.end())
            {
                mp[num] = idx;
            }
            idx++;
        }
        return ans;
    }
    bool isVowel(char ch)
    {
        if(ch == 'a') return true;
        if(ch == 'e') return true;
        if(ch == 'i') return true;
        if(ch == 'o') return true;
        if(ch == 'u') return true;

        return false;
    }
};

1542. Find Longest Awesome Substring

class Solution {
public:
    int longestAwesome(string s) {
        // 3 2 4 2 4 1 5
        unordered_map<int,int>mp;
        int ans=1;
        int num=0;
        mp[0]=-1;
        for(int i=0;i<s.length();i++)
        {
            num=num^(1<<(s[i]-'0'));
            // case 1
            if(mp.find(num)!=mp.end())
            {
                ans=max(ans,i-mp[num]);
            }
            // checking for palindrome
            for(int j=0;j<=9;j++)
            {
                int mask=num^(1<<j);
                if(mp.find(mask)!=mp.end())
                {
                    ans=max(ans,i-mp[mask]);
                }
            }
            if(mp.find(num)==mp.end())
            {
                mp[num]=i;
            }
        }
        return ans;
    }
};
